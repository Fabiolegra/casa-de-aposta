1 - prompt
Prompt utilizado

Analise os requisitos funcionais do sistema de apostas esportivas e crie a arquitetura do projeto em PHP utilizando o padrão MVC.

- Estruture o projeto em pastas (models, views, controllers, config, public).
- Inclua um arquivo de configuração de banco de dados (PDO + MySQL).
- Crie um script SQL inicial com as tabelas necessárias para:
  - usuarios (cadastro, autenticação, saldo)
  - eventos (jogos, odds, data/hora)
  - apostas (registro de apostas, valor, odd, status)
  - transacoes (depósitos e saques)
- Implemente arquivos base para cada camada:
  - Controller genérico + exemplo de controlador para cadastro/login de usuário
  - Modelo genérico + modelo de usuário
  - View inicial para tela de login
- Gere exemplos de rotas/controladores para os requisitos de cadastro e autenticação de usuários.
- Documente no README.md como rodar o projeto localmente (PHP + MySQL via XAMPP/Laragon ou Docker) e o prompt utilizado.

2- 
Implemente o módulo de Cadastro e Autenticação de usuários em um sistema PHP utilizando padrão MVC.

Requisitos funcionais:
- RF01: Permitir cadastro de novos usuários com nome, e-mail, senha (hash seguro) e data de nascimento.
- RF02: Validar idade mínima de 18 anos no cadastro.
- RF03: Permitir login com e-mail e senha cadastrados.
- RF04: Permitir recuperação de senha via e-mail.

Especificações:
- Utilize PDO para conexão segura com MySQL.
- Senhas devem ser armazenadas com password_hash e verificadas com password_verify.
- Se já existirem arquivos/models/controllers relacionados a "User", utilize-os; caso contrário, crie do zero.
- Crie as seguintes partes:
  - Model `User.php` para manipular a tabela de usuários.
  - Controller `AuthController.php` com métodos: register, login, logout, recoverPassword.
  - Views em `views/auth/` para formulários de registro, login e recuperação de senha.
  - Script SQL para a tabela `usuarios` (id, nome, email, senha, data_nascimento, data_cadastro).
- Adicione verificação da idade no backend.
- Para recuperação de senha, crie fluxo simples que gera token de redefinição enviado por e-mail (simulação de envio).
- Se algum arquivo necessário não existir, crie automaticamente.

3 -

Implemente as funcionalidades de conta nos arquivos register.php, login.php e recover.php em PHP, utilizando PDO para conexão segura com o banco de dados MySQL.

Requisitos:
- register.php:
  - Cadastro de novos usuários com nome, e-mail, senha (hash seguro com password_hash) e data de nascimento.
  - Validação de idade mínima (18 anos).
  - Verificação se o e-mail já existe no banco antes de inserir.
  - Mensagens de erro claras em caso de falha.

- login.php:
  - Autenticação de usuário por e-mail e senha.
  - Validação da senha com password_verify.
  - Manter sessão ativa após login bem-sucedido.
  - Mensagens de erro em caso de credenciais inválidas.

- recover.php:
  - Funcionalidade de recuperação de senha.
  - Usuário informa e-mail, o sistema gera token de recuperação e registra no banco.
  - Envio (ou simulação) de link de redefinição por e-mail.
  - Página para redefinir senha com verificação do token e atualização no banco.

Banco de Dados:
- Use a tabela `usuarios` com os campos: id, nome, email, senha, data_nascimento, data_cadastro.
- Inclua todas as verificações necessárias para falha de conexão e manipulação de dados.
- Utilize prepared statements para evitar SQL Injection.

Saída esperada:
- Código funcional para register.php, login.php e recover.php.
- Mensagens de feedback para o usuário (sucesso/erro).
- Indicação de onde salvar cada arquivo dentro da estrutura MVC.


4- agora implemente:

Perfil do usuário: ele deve poder editar os dados pessoais (nome, senha, data de nascimento), ver o saldo disponível e consultar o histórico de depósitos, saques e apostas.

Apostas: listar os eventos esportivos disponíveis, mostrar as odds (pode ser simulação ou via API), permitir apostas simples e salvar cada aposta no banco como “pendente”.

Depósitos e saques: criar formulários para depósitos e saques fictícios que atualizem o saldo do usuário, registrando tudo em um histórico.

Como quero que seja feito:

Usar arquitetura MVC em PHP com PDO.

Criar controllers (UserController, BetController, TransactionController).

Criar models (User, Bet, Transaction, Event).

Criar views simples, bonitas e responsivas (Bootstrap ou Tailwind).

Somente usuários logados podem acessar essas páginas (usar sessões PHP).

Toda comunicação com banco deve ser via PDO.

Estrutura do banco de dados:

usuarios (já existe, mas adicionar campo saldo DECIMAL(10,2)).

transacoes (id, usuario_id, tipo, valor, data).

apostas (id, usuario_id, evento_id, valor, odd, status, data).

eventos (id, esporte, descricao, data, odd1, odd2, odd3).

5 - 

Criar views para perfil, apostas, depósitos/saques e histórico.
Integrar métodos de edição, depósito, saque e aposta nos controllers.
Garantir que apenas usuários logados acessem as páginas.
e Se as credenciais estiverem corretas, o usuário deve ser redirecionado para a página principal (dashboard.php).

6 - 

Melhore o layout do meu dashboard (dashboard.php) do site de apostas esportivas LegraBet.

O que quero adicionar e melhorar:

Mostrar em destaque o saldo atual do usuário (buscando do banco via $_SESSION['user_id']).

Exibir um resumo rápido das últimas apostas (3 últimas, com valor, odd e status).

Exibir um resumo das últimas transações depósitos e saques.

Substituir os links simples por um grid de cards modernos e responsivos, cada card representando uma ação (Perfil, Apostar, Depositar, Sacar, Sair).

Usar Tailwind CSS para deixar o design mais bonito, com cores modernas, cantos arredondados e sombras.

O layout deve ser mobile-first, mas também ficar bom em telas grandes.
